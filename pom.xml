<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!-- комментарий Ctrl + / -->


    <!-- 1. Обязательная информация GAV -->
    <groupId>ru.itmo</groupId> <!-- уникальный идентификатор группы -->
    <artifactId>maven-lesson</artifactId> <!-- уникальный идентификатор проекта внутри группы -->
    <version>1.0-SNAPSHOT</version> <!-- текущая версия проекта -->

    <!-- 2. Дополнительная информация  -->
    <name>Maven Lesson</name> <!-- название проекта -->
    <description>Project about...</description> <!-- описание проекта в нескольких предложениях -->
    <url>https://maven-lesson-link.com</url> <!-- ссылка на сайт проекта -->

    <!-- 3. Тип файла, который будет доступен в результате сборки -->
    <!-- 3.1. jar (по умолчанию) /
         3.2. war - jar + сервлеты, статические файлы фронт-энд и т.п /
         3.3. ear - содержит javaEE модули /
         3.4. pom - для родительских pom файлов -->
    <!-- jar, war и ear - zip архивы, в настоящее время принято собирать jar вместо war и ear,
         если проект построен на Spring Framework -->
    <packaging>jar</packaging>

    <!-- 4. Свойства проекта -->
    <properties>
        <!-- локальные переменные для последующего использования в pom файле -->
        <jackson.version>2.15.2</jackson.version>

        <!-- версия компилятора -->
        <maven.compiler.source>18</maven.compiler.source>
        <maven.compiler.target>18</maven.compiler.target>

        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <!-- 5. Репозитории. В репозиториях хранятся артефакты - jar и пр. архивы -->
    <!-- 5.1. Локальный (на каждого пользователя) - /.m2/repository -->
    <!-- 5.2. Центральный (глобальный) -->
    <!-- 5.3. Корпоративный -->
    <!--
    <repositories>
        <repository>
            <id>company-id-01</id>
            <url>ссылка на репозиторий</url>
        </repository>
    </repositories>
    -->

    <!-- 6. Зависимости -->
    <dependencies> <!-- все необходимые зависимости -->
        <!-- Система сборки сначала ищет зависимость в локальном репозитории,
             если не находит, обращается в центральный,
             скачивает зависимость в локальный репозиторий и подключает к проекту.
             Если зависимость находится в локальном репозитории, то Maven не будет искать ее в центральном,
             а сразу подключит к проекту.
             Исключения - артефакты с версией *-SNAPSHOT, SNAPSHOT указывает на то, что версия находятся в разработке,
             в этом случае Maven всегда бут обновлять зависимость из центрального репозитория -->
        <dependency> <!-- каждая конкретная зависимость -->
            <groupId>org.projectlombok</groupId> <!-- идентификатор группы, которой принадлежит артефакт -->
            <artifactId>lombok</artifactId> <!-- идентификатор артефакта -->
            <version>1.18.24</version> <!-- версия артефакта -->
            <scope>provided</scope> <!-- область видимости зависимости -->
        </dependency>
        <!-- Область видимости зависимости: -->
        <!-- <scope>compile</scope> - значение по умолчанию, зависимость доступна
                                    во время сборки (компиляции), тестирования, выполнения -->
        <!-- <scope>test</scope> - зависимость доступна во время тестирования -->
        <!-- <scope>provided</scope> - код библиотеки не попадет в скомпилированные файлы и итоговый архив
                                      (аналогична compile, но не попадет в сборку). Обычно такие зависимости
                                      связаны с генерацией кода. В сборку попадает уже результат работы зависимости -->
        <!-- <scope>system</scope>
             <systemPath>путь к библиотеке на компьютере разработчика</systemPath> -->

        <!-- <scope>import</scope> - используется в модульной сборки -->

        <!-- <scope>runtime</scope> зависимость доступна только во время выполнения.
                                    Нет прямого доступа к коду библиотеки (import невозможен) при написании кода -->

        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
            <version>${jackson.version}</version> <!-- ${имя переменной} -->
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jsr310</artifactId>
            <version>${jackson.version}</version>
        </dependency>

    </dependencies>

    <!-- 7. Плагины -->

    <!-- Основные фазы сборки (основные этапы жизненного цикла Maven проекта): -->
    <!-- 1. clean - удаление папки target со всем ее содержимым (фаза может выполняться самостоятельно или
            предшествовать другим фазам, например compile)  -->
    <!-- 2. validate - проверка исходного кода  -->
    <!-- 3. compile - компиляция (фазе предшествуют фазы clean и validate)  -->
    <!-- 4. test - запуск тестов (фаза выполняется самостоятельно)  -->
    <!-- 5. package - создание архива, тип определен тегом packaging
            (фазе предшествуют фазы clean, validate, compile)  -->
    <!-- 6. verify - проверяет артефакт для последующей отправки в maven репозиторий  -->
    <!-- 7. install - добавление артефакта в локальный репозиторий  -->
    <!-- 8. deploy - добавление артефакта в удаленный репозиторий  -->
    <!-- 9. site - генерация документации, сайта проекта  -->

    <!-- Сами по себе фазы ничего не делают, не выполняют задач.
         К фазам необходимо подключать плагины, которые выполняют поставленные перед ними задачи.
         К одной фазе можно подключить несколько плагинов, каждый плагин может выполнять несколько задач.
         Если к фазе не подключено ни одного плагина, то задачи, поставленные перед фазой просто не будут выполнены.
         К фазам уже подключены плагины, можно заменить их другими или изменить настройки,
         а можно добавить совершенно новые плагины и подключить их к различным фазам -->

    <build>
        <plugins> <!-- все плагины -->
            <plugin> <!-- каждый конкретный плагин -->
                <!-- генерация сайта проекта, плагин используется по умолчанию, можно изменить настройки -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-site-plugin</artifactId>
                <version>3.9.1</version>
                <configuration> <!-- дополнительные настройки плагина -->
                    <!-- на каких языках должен быть сгенерированы страницы -->
                    <locales>en,ru</locales>
                </configuration>
                <!-- по умолчанию привязан к фазе site -->
            </plugin>

            <!-- для генерации исполняемого архива используется jar плагин;
                 вместо него будем использовать shade-plugin;
                 он позволяет генерировать итоговый артефакт с зависимостями и без них, исполняемый и нет -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.2.3</version>

                <executions> <!-- привязка плагина к фазам сборки -->
                    <execution> <!-- отдельный тег на каждую фазу -->
                        <phase>package</phase> <!-- привязка к фазе package -->
                        <goals> <!-- задачи, которые должен выполнять плагин на указанной фазе -->
                            <goal>shade</goal> <!-- задача - создать архив с зависимостями -->
                        </goals>
                    </execution>
                </executions>

                <configuration> <!-- дополнительные настройки плагина -->
                    <!-- чтобы jar стал исполняемым необходимо указать ссылку на класс с точкой входа-->
                    <transformers>
                        <transformer
                                implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                            <mainClass>ru.ifmo.lesson.Application</mainClass>
                        </transformer>
                    </transformers>
                </configuration>
            </plugin>

            <!-- Необходимо добавить JAVA_HOME в переменные среды: -->
            <!-- JAVA_HOME: путь к JDK, например, JAVA_HOME: D:\Java\JDK-19 -->
            <plugin> <!-- плагин, позволяющий генерировать документацию -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.2.0</version>

                <configuration> <!-- дополнительные настройки плагина -->
                    <show>private</show> <!-- отображать в документации приватные поля и методы -->
                </configuration>

                <executions> <!-- привязка к фазам сборки -->
                    <execution>
                        <phase>site</phase> <!-- привязка к фазе site-->
                        <goals> <!-- задачи, которые должен выполнить плагин на указанных фазах сборки-->
                            <goal>aggregate</goal> <!-- создать документация -->
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>